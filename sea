#!/bin/sh -e

# sea, the POSIX shell-script package manager

log () {
    # print fancy outputs
    printf "%b\n" "\u001b[36m[#] \u001b[0m$1"
}

warning () {
    # print fancy warnings
    printf "%b\n" "\u001b[36m[!] \u001b[33m\u001b[1m$1"
}

die () {
    # exit program with 1
    printf "%b\n" "\u001b[35m[x] \u001b[1m\u001b[31m$1"
    exit 1
}

usage () {
    # prints the usage of a command depending on the arguments
    cat <<EOF

Usage: sea [OPTION] [ACTION] <ARGS>

Options: TBA

Actions:
    i, install <pkg>     | install package(s)
    o, options           | configure sea
    p, patch <pkg>       | apply a patch to a package
    q, query <mode> args | search for package(s)
    r, remove <pkg>      | remove package(s)
    s, submit <file>     | upload package for approval
    u, upgrade [pkg]     | update package(s) to latest versions

EOF
}

pkg_get () {
    # Fetches a package.
    # If $3 exists else pick default repo.
    if [ $2 ]; then
        drepo="$2"
    else
        drepo="https://sea.h3liu.ml"
    fi

    packages=""
    # Get the categories.
    htmlret=$(curl "$drepo/repo/" -s -o "/tmp/$$/categories" -w '%{http_code}') || die "Unable to fetch the repo categories."

    if [ "$htmlret" != "200" ]; then
        die "ERROR $htmlret\n $(cat /tmp/$$/cateogries)"
    fi

    # Gets all the packages available
    for x in /tmp/$$/categories; do
        htmlret=$(curl "$drepo/repo/$x/" -s -o "/tmp/$$/packages" -w '%{http_code}') || die "Unable to fetch the repo packages."
        if [ "$htmlret" != "200" ]; then
            die "ERROR $htmlret\n $(cat /tmp/$$/packages)"
        fi

        for y in /tmp/$$/categories; do
            if [ "$y" == "$1" ]; then
                packages=$packages"$x "
                break
            fi
        done
    done

    # Return nothing if there are no categories available for the package.
    printf "$packages"
}

pkg_extract () {
    # extracts a package to a working directory, changes directories to said working directory
    mkdir -p "/tmp/$$/$1" || die "Unable to create working directory. Exiting."
    tar -vxf "$1.tar.gz" -C "/tmp/$$/$1"
    cd "/tmp/$$/$1"
}

pkg_depends () {
    # Resolves dependencies of a package.
    # Assumes that the directory has been created, and the PWD is the directory.
    if test -e depends; then
        for line in depends; do
            if [ "$(command -v $line)" ]; then
                log "Dependency $line present."
            else
                warning "Dependency $line missing."
            fi
        done
    else
        log "No dependency file found."
    fi
    log "Would you like to continue? Press Enter to continue or Ctrl+C to exit."
    read -r _
    # Above is a prompt for continuing or exiting.
}

pkg_install () {
    #Given one argument, the tarball for a package.
    pkg_extract "$1" || die "Unable to extract package."
    pkg_depends
    # Assumption is at this point, we are in the directory.
    while test -e "$SEA_INSTALL/$1"; do
        log "The name of this package is taken. Please give another."
        read -r $1
    done
    mkdir -p "$SEA_DATABASE/meta/$1"
    cp depends "$SEA_DATABASE/meta/$1"
    cp manifest "$SEA_DATABASE/meta/$1"
    cp tags "$SEA_DATABASE/meta/$1"
    printf "$SEA_INSTALL/$1" > "$SEA_DATABASE/meta/$1/location"
    mv "$1" "$SEA_INSTALL"
}

pkg_makepkg () (
    # Verifies if all the files are there then make a package.
    # The second argument must be the root dir of the files. chdir into it if so.
    # This function runs within a subshell to not require messing with PWD.
    cd "$2" || warning "Couldn't change directories into the target folder."

    if [ [ -e depends ] && [ -e manifest ] && [ -e package ] && [ -e tags ] ]; then
        tar -czvf "$1" depends manifest package tags || die "Unable to create archive."
    else
        die "Some neccessary package files are missing. Make sure all files are present."
    fi
)

pkg_submit () {
    # submits package
    # Submit to the default repository, unless $3 exists.
    if [ $3 ]; then
        drepo="$3"
    else
        drepo="https://sea.h3liu.ml"
    fi

    if [ -e "$2" ]; then
        # Stores the return code
        htmlret=$(curl -Ffile=@"$2" "$drepo/submit/$1" -s -o "/tmp/$$/$1" -w '%{http_code}') || die "Unable to submit"
        if [ "$htmlret" == "200" ]; then
            log "Successfully submitted the package!"
        else
            die "ERROR $htmlret\n $(cat /tmp/$$/$1)"
        fi
    else
        # Dies if there is no specified file.
        die "File not specified."
    fi

    rm -rf /tmp/$$/$1
}


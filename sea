#!/bin/sh -e

# sea, the POSIX shell-script package manager

log () {
    # print fancy outputs
    printf "%b\n" "\u001b[36m[#] \u001b[0m$1"
}

warn () {
    # print fancy warnings
    printf "%b\n" "\u001b[36m[!] \u001b[33m\u001b[1m$1"
}

die () {
    # exit program with 1
    printf "%b\n" "\u001b[35m[x] \u001b[1m\u001b[31m$1"
    exit 1
}

usage () {
    # prints the usage of a command depending on the arguments
    cat <<EOF

Usage: sea [OPTION] [ACTION] <ARGS>

Options: TBA

Actions:
    h, help              | view this help menu
    i, install <pkg>     | install package(s)
    o, options           | configure sea
    p, patch <pkg>       | apply a patch to a package
    q, query <mode> args | search for package(s)
    r, remove <pkg>      | remove package(s)
    s, submit <file>     | upload package for approval
    u, upgrade [pkg]     | update package(s) to latest versions

EOF
    exit 0 # Prevent anything further from happning when this is called.
}

pkg_get () {
    # Fetches a package.
    # The default repo is used, unless $3 exists.
    drepo=${2:-'https://sea.h3liu.ml'}

    packages=""
    # Get the categories.
    htmlret=$(curl "${drepo}/repo/" -s -o "/tmp/$$/categories" -w '%{http_code}') || die "Unable to fetch the repo categories."
    [ "${htmlret}" != "200" ] && die "ERROR ${htmlret}\n $(cat /tmp/$$/cateogries)"

    # Gets all the packages available
    for x in /tmp/$$/categories; do
        htmlret=$(curl "${drepo}/repo/${x}/" -s -o "/tmp/$$/packages" -w '%{http_code}') || die "Unable to fetch the repo packages."
        [ "${htmlret}" != "200" ] && die "ERROR ${htmlret}\n $(cat /tmp/$$/packages)"

        for y in /tmp/$$/categories; do
            [ "${y}" = "${1}" ] && {
                packages="/tmp/$$/$1"
                curl "${drepo}/repo/${x}/${1}" -o "${packages}"
                break
            }

            [ -z $packages ] || break
        done
    done

    # Returns nothing if no package has been found.
    # Else, return the path to the downloaded tarball.
    print '%s' "${packages}"
}

pkg_extract () {
    # extracts a package to a working directory, changes directories to said working directory
    mkdir -p "/tmp/$$/$1" || die "Unable to create working directory. Exiting."
    tar -vxf "$1.tar.gz" -C "/tmp/$$/$1"
    cd "/tmp/$$/$1"
}

pkg_depends () {
    # Resolves dependencies of a package.
    # Assumes that the directory has been created, and the PWD is the directory.
    if [ -e depends ]; then
        while read -r line; do
            if [ "$(command -v "$line" > /dev/null)" ]; then
                log "Dependency $line present."
            else
                warn "Dependency $line missing."
            fi
        done < depends
    else
        log "No dependency file found."
    fi
    log "Would you like to continue? Press Enter to continue or Ctrl+C to exit."
    read -r _
    # Above is a prompt for continuing or exiting.
}

pkg_install () {
    # Given one argument, the tarball for a package.
    pkg_extract "$1" || die "Unable to extract package."
    pkg_depends
    # Assumption is at this point, we are in the install directory.
    while [ -e "$SEA_INSTALL/$1"]; do
        log "The name of this package is taken. Please give another."
        read -r "$1"
    done
    mkdir -p "$SEA_DATABASE/meta/$1"
    cp depends "$SEA_DATABASE/meta/$1"
    cp manifest "$SEA_DATABASE/meta/$1"
    cp tags "$SEA_DATABASE/meta/$1"
    printf "%s/%s" > "%s/meta/%s/location" "$SEA_INSTALL" "$1" "$SEA_INSTALL" "$1"
    mv "$1" "$SEA_INSTALL"
}

pkg_makepkg () (
    # Checks if all files neccessary to make a package are present.
    # $1 is archive name, $2 is the directory that the package would be built from.
    # This function runs within a subshell to avoid messing with $PWD.
    cd "$2" || warn "Couldn't change directories into the target folder."

    if [ -e depends ] && [ -e manifest ] && [ -e package ] && [ -e tags ]; then
        tar -czvf "$1" depends manifest package tags || die "Unable to create archive."
    else
        die "Some neccessary package files are missing. Make sure all files are present."
    fi
)

pkg_submit () {
    # Submit a package to the default repository, unless $3 exists.
    # In which case, submit to the repository $3.
    drepo=${3:-'https://sea.h3liu.ml'}
    # $1 - package name
    # $2 - archive path
    # $3 - repo url

    if [ -e "$2" ]; then
        # Store the return code of the submit request.
        htmlret=$(curl -Ffile=@"$2" "${drepo}/submit/$1" -s -o "/tmp/$$/$1" -w '%{http_code}') || die "Unable to submit"
        if [ "${htmlret}" = "200" ]; then
            log "Successfully submitted the package!"
        else
            die "ERROR ${htmlret}\n $(cat /tmp/$$/"$1")"
        fi
    else
        # Dies if there is no specified file.
        die "File not specified."
    fi

    rm -rf /tmp/$$/"$1"
}

flags () {
    command_flags=""
    for arg in "$@"; do
        case $arg in
            ---*) ;; # Not too long!
            --*) [ -z "${command_flags}" ] && command_flags="${arg}" || command_flags="${command_flags}, ${arg}" ;;
            -*)
                # Check that flags without args that use the shortened syntax (-abcdef...) are accounted for.
                # Short flags should never go beyond 2 chars in theory.
                if [ "${#arg}" -gt 2 ]; then
                    true
                else
                    true
                fi
            ;;

            *) ;; # If it's not a flag, don't do anything
        esac
    done
}

args () {
    # Argument interpreter.
    # $1 is always an action.
    case "$1" in
        i|install)
            shift 1
            # For loop for each requested packages
            for pkgs in $@; do
                pkg_install "$(pkg_get ${1})"
            done
        ;;
        u|upgrade)
            shift 1
            # Place upgrade here.
        ;;
        r|remove)
            shift 1
            # Place remove here.
        ;;
        p|patch)
            shift 1
            # Place patch here.
        ;;
        h|help)
            usage
        ;;
        *)
            usage
            die "Not a valid action."
        ;;
    esac
}

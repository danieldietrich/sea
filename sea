#!/bin/sh -e

# sea, the POSIX shell-script package manager
SEA_VERSION=Work-in-progress
# Setting default values if they don't exist
[ -z "$SEA_DATABASE" ] && export SEA_DATABASE="/etc/sea.d"
[ -z "$SEA_INSTALL" ] && export SEA_INSTALL="/usr/bin"

log () {
    # print fancy outputs
    printf "%b\n" "\u001b[36m[#] \u001b[0m$1"
}

warn () {
    # print fancy warnings
    printf "%b\n" "\u001b[36m[!] \u001b[33m\u001b[1m$1"
}

die () {
    # exit program with 1
    printf "%b\n" "\u001b[35m[x] \u001b[1m\u001b[31m$1"
    exit 1
}

version () {
    # prints the version of sea.
    cat <<EOF

      :::::::: ::::::::::    :::
    :+:    :+::+:         :+: :+:
   +:+       +:+        +:+   +:+
  +#++:++#+++#++:++#  +#++:++#++:
        +#++#+       +#+     +#+
#+#    #+##+#       #+#     #+#
######## #############     ###

sea Package Manager. Version ${SEA_VERSION}
GitHub Repo : https://github.com/h34ting4ppliance/sea
Sea Webpage : https://sea.h3liu.ml/

EOF
}

usage () {
    # prints the usage of a command depending on the arguments
    cat <<EOF

Usage: sea [OPTION] [ACTION] <ARGS>

Options: TBA

Actions:
    h, help              | view this help menu
    i, install <pkg>     | install package(s)
    o, options           | configure sea
    p, patch <pkg>       | apply a patch to a package
    q, query <mode> args | search for package(s)
    r, remove <pkg>      | remove package(s)
    s, submit <file>     | upload package
    u, upgrade [pkg]     | update package(s) to latest versions

EOF
}

asroot () {
    # Gain root permissions using su, sudo or doas.
    # Hurrah, portability.
    if [ "$(id -u)" != 0 ]; then
        if command -v sudo >/dev/null; then
            sudo -E -- "$@"
        elif command -v doas >/dev/null; then
            doas -- "$@"
        else
            # This is an else because I don't think it's possible to *not* have su on a system."
            su -pc "$*"
        fi
    fi
}

pkg_get () {
    # Fetches a package.
    # The default repo is used, unless $3 exists.
    drepo=${2:-'https://sea.h3liu.ml'}
    packages=""
    # Get the categories.
    mkdir "/tmp/$$" 2>/dev/null
    htmlret=$(curl "$drepo/repo/" -s -o "/tmp/$$/categories" -w '%{http_code}') || die "Unable to fetch the repo categories."
    [ "$htmlret" != "200" ] && die "ERROR $htmlret\n $(cat /tmp/$$/cateogries)"
    # Gets all the packages available
    while read -r x; do
        log "Current Category: $x"
        htmlret=$(curl "$drepo/repo/$x/" -s -o "/tmp/$$/packages" -w '%{http_code}') || die "Unable to fetch the repo packages."
        [ "$htmlret" != "200" ] && die "ERROR $htmlret\n $(cat /tmp/$$/packages)"

        while read -r y; do
            [ "$y" = "$1" ] && {
                packages="/tmp/$$/$1.tar.gz"
                curl "$drepo/repo/$x/$1" -s -o "$packages" >/dev/null || die "Package fetching failed."
                break
            }

            [ -z "$packages" ] || break
        done </tmp/$$/packages
    done </tmp/$$/categories

    # Returns nothing if no package has been found.
    # Else, return the path to the downloaded tarball.
}

pkg_extract () {
    # extracts a package to a working directory, changes directories to said working directory
    mkdir -p "/tmp/$$/$1" 2>/dev/null || die "Unable to create working directory. Exiting."
    tar -xf "$1.tar.gz" -C "/tmp/$$/$1" >/dev/null
    cd "/tmp/$$/$1"
}

pkg_depends () {
    # Resolves dependencies of a package.
    # Assumes that the directory has been created, and the PWD is the directory.
    if [ -e depends ]; then
        while read -r line; do
            if command -v "$line" >/dev/null; then
                log "Dependency $line present."
            else
                warn "Dependency $line missing."
            fi
        done < depends
    else
        log "No dependency file found."
    fi
    log "Would you like to continue? Press Enter to continue or Ctrl+C to exit."
    read -r _
    # Above is a prompt for continuing or exiting.
}

pkg_install () {
    # Given one argument, the tarball for a package.
    # Given another argument, the package name.
    pkg_extract "$1" || die "Unable to extract package."
    pkg_depends
    # Assumption is at this point, we are in the install directory.
    while [ -e "$SEA_INSTALL/$1" ]; do
        log "The name of this package is taken. Please give another."
        read -r "$1"
    done
    asroot mkdir -p "$SEA_DATABASE/meta/$2" || die "Unable to create metadata."
    asroot cp depends "$SEA_DATABASE/meta/$2" || die "Unable to create depends."
    asroot cp manifest "$SEA_DATABASE/meta/$2" || die "Unable to create manifest."
    asroot cp tags "$SEA_DATABASE/meta/$2" || die "Unable to create tags."
    asroot printf "%s" "$SEA_INSTALL/$2" | asroot tee "$SEA_DATABASE/meta/$2/location"
    # chmod the executable before adding it.
    asroot chmod a+x package
    asroot mv "package" "$SEA_INSTALL/$2"
}

pkg_remove () {
    # Removes a package from the computer.
    # Checks if the package exists
    [ -d "${SEA_DATABASE}/meta/$1" ] || die "$1 doesn't exist."
    # Checks if the location meta exists, skip executable deletion if not found.
    if [ -e "$SEA_DATABASE/meta/$1/location" ]; then
        log "Removing package executable."
        asroot rm -f "$(cat $SEA_DATABASE/meta/$1/location)" || warn "Unable to delete the executable. Only deleting the meta"
    else
        warn "Location metadata missing. Only deleting the meta"
    fi
    log "Removing package metadata."
    asroot rm -rf "$SEA_DATABASE/meta/$1" || warn "Metadata deletion failed."
}

pkg_makepkg () (
    # Checks if all files neccessary to make a package are present.
    # $1 is archive name, $2 is the directory that the package would be built from.
    # This function runs within a subshell to avoid messing with $PWD.
    cd "$2" || warn "Couldn't change directories into the target folder."
    if [ -e depends ] && [ -e manifest ] && [ -e package ] && [ -e tags ]; then
        tar -czvf "$1" depends manifest package tags || die "Unable to create archive."
    else
        die "Some neccessary package files are missing. Make sure all files are present."
    fi
)

pkg_submit () {
    # Submit a package to the default repository, unless $3 exists.
    # In which case, submit to the repository $3.
    drepo=${3:-'https://sea.h3liu.ml'}
    # $1 - package name
    # $2 - archive path
    # $3 - repo url

    if [ -e "$2" ]; then
        # Store the return code of the submit request.
        htmlret=$(curl -Ffile=@"$2" "$drepo/submit/$1" -s -o "/tmp/$$/$1" -w '%{http_code}') || die "Unable to submit"
        if [ "$htmlret" = "200" ]; then
            log "Successfully submitted the package!"
        else
            die "ERROR ${htmlret}\n $(cat /tmp/$$/"$1")"
        fi
    else
        # Dies if there is no specified file.
        die "File not specified."
    fi

    log "Package Token: $(cat /tmp/$$/$1)" #Gross, why? You've made shellcheck complain.
    rm -rf "/tmp/$$/$1"
}

flags () {
    command_flags=""
    for arg in "$@"; do
        case $arg in
            ---*) ;; # Not too long!
            --*) [ -z "${command_flags}" ] && command_flags="${arg}" || command_flags="${command_flags}, ${arg}" ;;
            -*)
                # Check that flags without args that use the shortened syntax (-abcdef...) are accounted for.
                # Short flags should never go beyond 2 chars in theory.
                if [ "${#arg}" -gt 2 ]; then
                    true
                else
                    true
                fi
            ;;

            *) ;; # If it's not a flag, don't do anything
        esac
    done
}

args () {
    # Argument interpreter.
    # $1 is always an action.
    mkdir -p "/tmp/$$" >/dev/null
    case "$1" in
        i|install)
            shift 1
            # For loop for each requested packages
            for package in "$@"; do
                # Fetches and installs every specified package.
                pkg_get "${package}" || die "Unable to fetch package."
                pkg_install "/tmp/$$/$package" "$package" || die "Installation of $package has failed."
            done
            log "Package(s) have been installed."
        ;;
        q|query)
            shift 1
            # TODO : Fix this.
            for package in "$SEA_DATABASE"/meta/*; do
                # TODO: Tags and author filters.
                printf "%s\n" "$package"
            done
        ;;
        s|submit)
            shift 1
            # To submit a package, you just need to set the current working directory to where the package files you have prepared.
            # The tarball must contain the members this way :
            # package
            # manifest
            # etc..
            # And not
            # ./package
            # ./path/to/whatever/manifest
            # etc../etc..

            pkg_makepkg "/tmp/$$/$1.tar.gz" || die "The creation of $1 has failed."
            pkg_submit "$1" "/tmp/$$/$1.tar.gz" || die "The submission of $1 has failed."
        ;;
        u|upgrade)
            shift 1
        ;;
        r|remove)
            shift 1
            for package in "$@"; do
                pkg_remove "$package"
            done
        ;;
        p|patch)
            shift 1
            # Place patch here.
        ;;
        v|version)
            version
        ;;
        h|help)
            usage
        ;;
        *)
            usage
            die "Not a valid action."
        ;;
    esac
    rm -rf "/tmp/$$"
}

args "$@"
